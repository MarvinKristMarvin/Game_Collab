Présentation du projet : Game Hearts est une application de rencontre entre les personnes travaillant dans le secteur du jeu video, afin de former
des equipes. Les utilisateurs peuvent s'inscrire et creer un profil pour se rendre disponible au recrutement, mais aussi découvrir tous les profils et les contacter.
Il est possible d'utiliser des filtres de recherche (métiers, description, age, langues etc) afin de trouver des collaborateurs adaptés à son projet.

Besoins et objectifs : Souvent, les développeurs sont contraints de créer des jeux seuls, car ils ne trouvent parsonne avec qui travailler. Avec Game Hearts,
il sera possible de se regrouper autour de projets de jeux vidéos, afin de créer des jeux vidéos de meilleure qualité, plus rapidement et sans isolement.
Game Hearts doit simplifier la recherche de profils au maximum.

Cible : L'application cible tous les acteurs du jeu vidéo (developpeur, artiste, modeliste, musicien, sound designer, compositeur, etc...)

Minimum viable product : permettre aux utilisateurs de trouver des profils qui correspondent au besoinx de leur projet de jeu vidéo, notemment grâce à des filtres de recherche.

Améliorations futures possibles :
- Chat direct dans l'application à la place du mail
- Ajout de lien de portfolio
- Ajout d'images dans le profil
- Acces à un profil détaillé
- Possibilité de créer des présentations de projets, sur lesquels les utilisateurs peuvent swiper et demander de participer
(Au lieu de contacter par mail, cela pourrait devenir une invitation à participer au projet, si le profil accepte, alors les participants au projet peuvent chatter ensemble)
- Ajout d'un systeme d'abonnement premium (pour poster + de projets ou avoir plus de visibilité par exemple)

Technologies :
- React :  pour le front
- Express & Node : pour le back
- PostgresSQL : besoin de modifier les données des utilisateurs
- Typescript : simplifie la maintenance du projet

Routes :
homepage/ -> accueil et explications de l'app
search/ -> page de filtrage de la recherche de profil
search/users?name=xxx&age=xxx,xxx&language=xxx,xxx&jobs=xxx,xxx&keywords=xxx,xxx&remuneration=xxx,xxx -> Recherche des profils en utilisant des filtres
profile/ -> connexion et inscription, si connecté montre son propre profil

Routes API :
GET /users?name=xxx&age=xxx,xxx&language=xxx,xxx&jobs=xxx,xxx&keywords=xxx,xxx&remuneration=xxx,xxx -> Recherche des profils en utilisant des filtres
GET /users/userId -> Récupérer son propre profil
POST /users -> Créer son profil
PATCH /users/userId -> Modifier son profil
DELETE /users/userId -> Supprimer son profil

Charte graphique :
- description : l'application doit rappeler le secteur du jeu vidéo -> couleurs contrastées, thème principal sombre. Interface très épurée et rapide à comprendre, la version 
desktop sera visuellement similaire à la version mobile (respecter le ratio longueur largeur d'un smartphone, simuler les bordures du smartphone par une bordure de couleur),
cela changera probalement dans le futur.
- couleurs : rouge #F1005C, violet #BB0072, jaune #FFD840, orange #FF9900, noir rougeâtre #0A0808
- fonts : Noto Sans

Recueil de données :
NOM | DESCRIPTION | TYPE | ENTITE
- name | nom de l'utilisateur | text court | utilisateur
- age | age de l'utilisateur | nombre | utilisateur
- visible | disponibilité de l'utilisateur pour recrutement | booléen | utilisateur
- profile_picture | image de profil de l'utilisateur | text court | utilisateur
- description | description de l'utilisateur | text | utilisateur
- name | nom du job | text court | job
- name | nom du language | text court | language
- name | nom du role | text court | role 
- type | type de la remuneration | text court | remuneration

Dictionnaire de données :
Table utilisateur
- id integer pknotnull identifiant de l'utilisateur
- name text notnull nom de l'utilisateur
- age smallint notnull age de l'utilisateur
- visible boolean notnull disponibilité de l'utilisateur pour être recruté
- profile_picture text notnull url de l'image de profil
- description text notnull description des compétences de l'utilisateur
- role entity notnull role de l'utilisateur (id_role)
Table role
- id integer pknotnull identifiant du role
- name text notnull nom du role
Table job
- id integer pknotnull identifiant du job
- name text notnull nom du job
Table language
- id integer pknotnull identifiant du language
- name text notnull nom du language
Table remuneration
- id integer pknotnull identifiant du type de remuneration
- type text notnull type de remuneration

Autres points à respecter :
- Sécurité : authentification sécurisée, protection contre les failles courantes (XSS, injections SQL, etc.), CORS.
- Déploiement : rédaction a minima d'une procédure de déploiement (CI/CD en bonus).
- Responsive : application développée en mobile first et responsive.
- Accessibilité : respect des normes d'accessibilité web WCAG.
- RGPD et mentions légales : mettre en place les mentions légales liées au règlement général sur la protection des données (RGPD).
- Versionning : utilisation de Git et GitHub.
- API : en consommer au moins une (qu’elle soit interne ou externe). Un seul appel peut être suffisant, l’API ne doit pas forcément être utilisée pour tout le projet.
- SEO : appliquer les bonnes pratiques visant à maximiser le référencement du projet.
- Tests : plan de tests couvrant les fonctionnalités principales du projet.
- Conteneurisation (Docker) : pour l'environnement de développement voire pour le déploiement
- Démarche d'éco-conception (optimisation des images, minification des fichiers, etc.).