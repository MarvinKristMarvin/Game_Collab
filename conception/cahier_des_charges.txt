Présentation du projet : Game Hearts est une application de rencontre entre les personnes travaillant dans le secteur du jeu video, afin de former
des equipes. Les utilisateurs peuvent s'inscrire et creer un profil pour se rendre disponible au recrutement, mais aussi découvrir tous les profils et les contacter.
Il est possible d'utiliser des filtres de recherche (métiers, description, age, langues etc) afin de trouver des collaborateurs adaptés à son projet.

Besoins et objectifs : Souvent, les développeurs sont contraints de créer des jeux seuls, car ils ne trouvent parsonne avec qui travailler. Avec Game Hearts,
il sera possible de se regrouper autour de projets de jeux vidéos, afin de créer des jeux vidéos de meilleure qualité, plus rapidement et sans isolement.
Game Hearts doit simplifier la recherche de profils au maximum.

Cible : L'application cible tous les acteurs du jeu vidéo (developpeur, artiste, modeliste, musicien, sound designer, compositeur, etc...)

Minimum viable product : permettre aux utilisateurs de trouver des profils qui correspondent au besoinx de leur projet de jeu vidéo, notemment grâce à des filtres de recherche.

Améliorations futures possibles :
- Chat direct dans l'application à la place du mail
- Ajout d'images dans le profil
- Acces à un profil détaillé
- Possibilité de créer des présentations de projets, sur lesquels les utilisateurs peuvent swiper et demander de participer
(Au lieu de contacter par mail, cela pourrait devenir une invitation à participer au projet, si le profil accepte, alors les participants au projet peuvent chatter ensemble)
- Ajout d'un systeme d'abonnement premium (pour avoir plus de visibilité par exemple)

Technologies :
- React : simplifie la création et la gestion des composants, favorise leur réutilisabilité et garantit la scalabilité si l'application se développe.
- Vite : bundler et transpiler.
- Express : léger et simple à configurer, permet de gérer facilement les routes et les requêtes.
- Node : léger et permet d'utiliser du javascript côté serveur, simplifiant le développement avec un langage unique.
- Nodemon : accélère le développement de la partie backend
- Cors : autorise certaines url à accéder au backend
- PostgresSQL : besoin de stocker et modifier les données des utilisateurs, donc il faut une bdd relationnelle, de plus, c'est fiable, puissant, open source, et offre des
fonctionnalités avancées tout en restant adapté aux petits projets.
- Typescript : améliore la fiabilité grâce au typage, facilite la maintenance du code et réduit les erreurs dès le développement.

Routes :
homepage/ -> accueil et explications de l'app
search/ -> page de présentations des profils trouvés selon des critères de recherche
profile/ -> connexion et inscription, si connecté montre sa page de modification de profil

Routes API :
GET /api/users/filtered?name=xxx&age=xxx,xxx&language=xxx,xxx&jobs=xxx,xxx&keywords=xxx,xxx&remuneration=xxx,xxx -> Recherche des profils en utilisant des filtres
PATCH /api/user/:id -> Modifier son profil
DELETE /api/user/:id -> Supprimer son profil
POST /signup -> Créer son profil
POST /login -> Se connecter
POST /logout -> Se déconnecter

Charte graphique :
- description : l'application doit rappeler le secteur du jeu vidéo -> couleurs contrastées, thème principal sombre. Interface très épurée et rapide à comprendre.
- couleurs : rouge #F1005C, violet #BB0072, jaune #FFD840, orange #FF9900, noir rougeâtre #0A0808
- fonts : Noto Sans
- drapeaux : https://flagpedia.net/download/icons

Recueil de données :
NOM | DESCRIPTION | TYPE | ENTITE
- password | mot de passe de l'utilisateur | text | utilisateur
- mail | email d'inscription de l'utilisateur | text | utilisateur
- name | nom de l'utilisateur | text court | utilisateur
- age | age de l'utilisateur | nombre | utilisateur
- available | disponibilité de l'utilisateur pour recrutement | booléen | utilisateur
- description | description de l'utilisateur | text | utilisateur
- portfolio_url | url du portfolio de l'utilisateur | text | utilisateur
- profile_mail | email de contact de l'utilisateur | text | utilisateur
- created_at | date de création de l'utilisateur | date | utilisateur
- updated_at | date de modification de l'utilisateur | date | utilisateur
- name | nom du job | text court | job
- name | nom du language | text court | language
- name | nom du role | text court | role 
- type | type de la remuneration | text court | remuneration

Dictionnaire de données :
Table utilisateur
- id INTEGER PK NOT NULL identifiant de l'utilisateur
- password TEXT NOT NULL mot de pass de l'utilisateur
- mail TEXT UNIQUE NOT NULL email d'inscription de l'utilisateur
- name TEXT NOT NULL nom de l'utilisateur
- age INTEGER NOT NULL age de l'utilisateur
- available BOOLEAN NOT NULL disponibilité de l'utilisateur pour être recruté
- description TEXT NOT NULL description des compétences de l'utilisateur
- portfolio_url TEXT url du portfolio de l'utilisateur
- profile_mail TEXT NOT NULL adresse email de contact
- created_at DATE NOT NULL date de création de l'utilisateur
- updated_ at DATE date de modification du profil de l'utilisateur
- role ENTITY NOT NULL role de l'utilisateur (id_role)
Table role
- id INTEGER PK NOT NULL identifiant du role
- name TEXT NOT NULL nom du role
Table job
- id INTEGER PK NOT NULL identifiant du job
- name TEXT NOT NULL nom du job
Table language
- id INTEGER PK NOT NULL identifiant du language
- name TEXT NOT NULL nom du language
Table remuneration
- id INTEGER PK NOT NULL identifiant du type de remuneration
- type TEXT NOT NULL type de remuneration

Autres points à respecter :
- Sécurité : authentification sécurisée, protection contre les failles courantes (XSS, injections SQL, etc.), CORS.
- Déploiement : rédaction a minima d'une procédure de déploiement (CI/CD en bonus).
- Responsive : application développée en mobile first et responsive.
- Accessibilité : respect des normes d'accessibilité web WCAG.
- RGPD et mentions légales : mettre en place les mentions légales liées au règlement général sur la protection des données (RGPD).
- Versionning : utilisation de Git et GitHub.
- API : en consommer au moins une (qu’elle soit interne ou externe). Un seul appel peut être suffisant, l’API ne doit pas forcément être utilisée pour tout le projet.
- SEO : appliquer les bonnes pratiques visant à maximiser le référencement du projet.
- Tests : plan de tests couvrant les fonctionnalités principales du projet.
- Conteneurisation (Docker) : pour l'environnement de développement voire pour le déploiement
- Démarche d'éco-conception (optimisation des images, minification des fichiers, etc.).